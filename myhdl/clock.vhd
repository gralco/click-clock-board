-- File: clock.vhd
-- Generated by MyHDL 0.8.1
-- Date: Sat May 28 18:39:08 2016


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_081.all;

entity clock is
    port (
        clk: in std_logic;
        reset: in std_logic;
        en: in std_logic;
        count_vec: in unsigned(23 downto 0);
        pm: inout std_logic;
        LED_vec: in unsigned(41 downto 0)
    );
end entity clock;


architecture MyHDL of clock is





type t_array_count is array(0 to 6-1) of unsigned(3 downto 0);
signal count: t_array_count;
type t_array_LED is array(0 to 6-1) of unsigned(6 downto 0);
signal LED: t_array_LED;

begin


count(0) <= count_vec(4-1 downto 0);
count(1) <= count_vec(8-1 downto 4);
count(2) <= count_vec(12-1 downto 8);
count(3) <= count_vec(16-1 downto 12);
count(4) <= count_vec(20-1 downto 16);
count(5) <= count_vec(24-1 downto 20);


CLOCK_COUNTER: process (clk, reset) is
begin
    if (reset = '1') then
        count(0) <= to_unsigned(0, 4);
        count(1) <= to_unsigned(0, 4);
        count(2) <= to_unsigned(0, 4);
        count(3) <= to_unsigned(0, 4);
        count(4) <= to_unsigned(0, 4);
        count(5) <= to_unsigned(0, 4);
    elsif rising_edge(clk) then
        if bool(en) then
            count(0) <= ((count(0) + 1) mod 10);
            count(1) <= ((count(1) + to_unsigned(count(0) = 9, 1)) mod 6);
            count(2) <= ((count(2) + ((count(0) = 9) and (count(1) = 5))) mod 10);
            count(3) <= ((count(3) + ((count(0) = 9) and (count(1) = 5) and (count(2) = 9))) mod 6);
            count(4) <= resize(unsigned((signed(resize(count(4), 5) + ((count(0) = 9) and (count(1) = 5) and (count(2) = 9) and (count(3) = 5))) mod (10 - signed(resize(7 * count(5), 9)))) + ((count(0) = 9) and (count(1) = 5) and (count(2) = 9) and (count(3) = 5) and (count(4) = 2) and bool(count(5)))), 4);
        end if;
        if bool(reset) then
            count(0) <= to_unsigned(0, 4);
            count(1) <= to_unsigned(0, 4);
            count(2) <= to_unsigned(0, 4);
            count(3) <= to_unsigned(0, 4);
            count(4) <= to_unsigned(0, 4);
        end if;
    end if;
end process CLOCK_COUNTER;


CLOCK_TFF: process (clk, reset) is
begin
    if (reset = '1') then
        count(0) <= to_unsigned(0, 4);
        count(1) <= to_unsigned(0, 4);
        count(2) <= to_unsigned(0, 4);
        count(3) <= to_unsigned(0, 4);
        count(4) <= to_unsigned(0, 4);
        count(5) <= to_unsigned(0, 4);
        pm <= '0';
    elsif rising_edge(clk) then
        if bool(en) then
            count(5) <= to_unsigned((count(5) xor (((count(0) = 9) and (count(1) = 5) and (count(2) = 9) and (count(3) = 5) and (count(4) = 9)) or ((count(0) = 9) and (count(1) = 5) and (count(2) = 9) and (count(3) = 5) and (count(4) = 2) and bool(count(5))))), 4);
            pm <= (pm xor stdl((count(0) = 9) and (count(1) = 5) and (count(2) = 9) and (count(3) = 5) and (count(4) = 1) and bool(count(5))));
        end if;
        if bool(reset) then
            count(5) <= to_unsigned(0, 4);
            pm <= '0';
        end if;
    end if;
end process CLOCK_TFF;


CLOCK_DECODER: process (count(0), count(1), count(2), count(3), count(4), count(5)) is
begin
    for i in 0 to 6-1 loop
        LED(i) <= unsigned'(((bool(count(i)(0)) and (not bool(count(i)(1))) and (not bool(count(i)(2))) and (not bool(count(i)(3)))) or ((not bool(count(i)(0))) and (not bool(count(i)(1))) and bool(count(i)(2))) or (bool(count(i)(1)) and bool(count(i)(3)))) & ((bool(count(i)(0)) and (not bool(count(i)(1))) and bool(count(i)(2))) or ((not bool(count(i)(0))) and bool(count(i)(1)) and bool(count(i)(2))) or (bool(count(i)(1)) and bool(count(i)(3)))) & (((not bool(count(i)(0))) and bool(count(i)(1)) and (not bool(count(i)(2)))) or (bool(count(i)(2)) and bool(count(i)(3)))) & ((bool(count(i)(0)) and (not bool(count(i)(1))) and (not bool(count(i)(2))) and (not bool(count(i)(3)))) or (bool(count(i)(0)) and bool(count(i)(1)) and bool(count(i)(2))) or ((not bool(count(i)(0))) and (not bool(count(i)(1))) and bool(count(i)(2)))) & (bool(count(i)(0)) or ((not bool(count(i)(1))) and bool(count(i)(2)))) & ((bool(count(i)(0)) and (not bool(count(i)(2))) and (not bool(count(i)(3)))) or (bool(count(i)(0)) and bool(count(i)(1))) or (bool(count(i)(1)) and (not bool(count(i)(2))))) & ((bool(count(i)(0)) and bool(count(i)(1)) and bool(count(i)(2))) or ((not bool(count(i)(1))) and (not bool(count(i)(2))) and (not bool(count(i)(3))))));
    end loop;
    if (not bool(count(5))) then
        LED(5) <= to_unsigned(127, 7);
    end if;
end process CLOCK_DECODER;

end architecture MyHDL;
